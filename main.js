const supabaseConfig={url:'https://ksuolzzhpssazyfwbkeg.supabase.co',anonKey:'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtzdW9senpocHNzYXp5Zndia2VnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU1NTcxMDQsImV4cCI6MjA3MTEzMzEwNH0.6ltEPGMJyOZbXmRjNCGZJxYmDDwkiFZy4WzawSTCpFA'};class GlobalRatingSystem{constructor(){this.supabase=null;this.userFingerprint=null;this.lastDownloadTime=0;this.downloadCooldown=10000;this.cache={ratings:new Map(),downloads:new Map(),lastUpdate:0,cacheDuration:60000};this.init()}
async init(){try{const{createClient}=await import('https://cdn.skypack.dev/@supabase/supabase-js@2');this.supabase=createClient(supabaseConfig.url,supabaseConfig.anonKey);this.userFingerprint=await this.generateUserFingerprint();if(document.readyState==='loading'){document.addEventListener('DOMContentLoaded',()=>this.initializeAfterDOM())}else{this.initializeAfterDOM()}}catch(error){console.error('Error initializing rating system:',error);this.showMessage('خطأ في تحميل نظام التقييم','error')}}
async initializeAfterDOM(){try{const validFileIds=this.getValidFileIds();if(validFileIds.length>0){await this.loadAllDataOptimized(validFileIds)}
this.attachEventListeners();this.attachDownloadListeners()}catch(error){console.error('Error during DOM initialization:',error)}}
getValidFileIds(){const fileItems=document.querySelectorAll('.file-item[data-file-id]');const validIds=[];fileItems.forEach(item=>{const fileId=item.dataset.fileId;if(fileId&&fileId.trim()!==''){validIds.push(fileId.trim())}});return validIds}
async loadAllDataOptimized(fileIds){if(fileIds.length===0)return;const now=Date.now();const isCacheValid=(now-this.cache.lastUpdate)<this.cache.cacheDuration;if(isCacheValid&&this.cache.ratings.size>0){console.log('Using cached data');this.updateDisplaysFromCache(fileIds);return}
try{await Promise.all([this.loadRatingsData(fileIds),this.loadDownloadsData(fileIds)]);this.cache.lastUpdate=now;this.updateAllDisplays(fileIds)}catch(error){console.error('Error loading data optimized:',error);await this.loadDataMinimal(fileIds)}}
async loadRatingsData(fileIds){try{const chunks=this.chunkArray(fileIds,100);const promises=chunks.map(async(chunk)=>{const{data,error}=await this.supabase.from('ratings').select('*').in('id',chunk);if(error){console.warn('Error loading ratings batch:',error);return[]}
data.forEach(rating=>{this.cache.ratings.set(rating.id,rating)});return data});await Promise.all(promises)}catch(error){console.error('Error loading ratings data:',error)}}
async loadDownloadsData(fileIds){try{const chunks=this.chunkArray(fileIds,100);const promises=chunks.map(async(chunk)=>{const{data,error}=await this.supabase.from('downloads').select('*').in('id',chunk);if(error){console.warn('Error loading downloads batch:',error);return[]}
data.forEach(download=>{this.cache.downloads.set(download.id,download)});return data});await Promise.all(promises)}catch(error){console.error('Error loading downloads data:',error)}}
async loadDataMinimal(fileIds){console.warn('Using minimal fallback loading');const visibleFileIds=fileIds.slice(0,20);try{await Promise.all([this.loadRatingsData(visibleFileIds),this.loadDownloadsData(visibleFileIds)]);this.updateAllDisplays(visibleFileIds);if(fileIds.length>20){setTimeout(()=>{const remainingIds=fileIds.slice(20);this.loadRatingsData(remainingIds);this.loadDownloadsData(remainingIds)},2000)}}catch(error){console.error('Minimal loading failed:',error);this.setDefaultValues(fileIds)}}
updateDisplaysFromCache(fileIds){fileIds.forEach(fileId=>{const ratingData=this.cache.ratings.get(fileId)||{average:0,count:0};this.updateRatingDisplay(fileId,ratingData);if(ratingData.raters&&ratingData.raters.includes(this.userFingerprint)){this.disableRating(fileId)}
const downloadData=this.cache.downloads.get(fileId);const count=downloadData?(downloadData.count||0):0;this.updateDownloadDisplay(fileId,count)})}
updateAllDisplays(fileIds){fileIds.forEach(fileId=>{const ratingData=this.cache.ratings.get(fileId)||{average:0,count:0};this.updateRatingDisplay(fileId,ratingData);if(ratingData.raters&&ratingData.raters.includes(this.userFingerprint)){this.disableRating(fileId)}
const downloadData=this.cache.downloads.get(fileId);const count=downloadData?(downloadData.count||0):0;this.updateDownloadDisplay(fileId,count)})}
setDefaultValues(fileIds){fileIds.forEach(fileId=>{this.updateRatingDisplay(fileId,{average:0,count:0});this.updateDownloadDisplay(fileId,0)})}
async generateUserFingerprint(){const canvas=document.createElement('canvas');const ctx=canvas.getContext('2d');ctx.textBaseline='top';ctx.font='14px Arial';ctx.fillText('User fingerprint',2,2);const fingerprint=[navigator.userAgent,navigator.language,screen.width+'x'+screen.height,new Date().getTimezoneOffset(),canvas.toDataURL()].join('|');let hash=0;for(let i=0;i<fingerprint.length;i++){const char=fingerprint.charCodeAt(i);hash=((hash<<5)-hash)+char;hash=hash&hash}
return Math.abs(hash).toString()}
chunkArray(array,size){const chunks=[];for(let i=0;i<array.length;i+=size){chunks.push(array.slice(i,i+size))}
return chunks}
attachEventListeners(){const fileItems=document.querySelectorAll('.file-item[data-file-id]');fileItems.forEach(item=>{const fileId=item.dataset.fileId;if(!fileId||fileId.trim()===''){return}
const stars=item.querySelectorAll('.star');stars.forEach(star=>{const newStar=star.cloneNode(!0);star.parentNode.replaceChild(newStar,star);newStar.addEventListener('mouseenter',(e)=>{if(!newStar.classList.contains('disabled')){const allStars=item.querySelectorAll('.star');this.highlightStars(allStars,parseInt(e.target.dataset.rating))}});newStar.addEventListener('mouseleave',()=>{if(!newStar.classList.contains('disabled')){const allStars=item.querySelectorAll('.star');this.clearHighlight(allStars);this.showCurrentRating(allStars,fileId)}});newStar.addEventListener('click',async(e)=>{if(!newStar.classList.contains('disabled')){const rating=parseInt(e.target.dataset.rating);await this.rateFile(fileId,rating)}})})})}
attachDownloadListeners(){const downloadButtons=document.querySelectorAll('.download-btn');downloadButtons.forEach(button=>{const fileItem=button.closest('.file-item');if(!fileItem){return}
const fileId=fileItem.dataset.fileId;if(!fileId||fileId.trim()===''){return}
const originalOnclick=button.getAttribute('onclick');if(!originalOnclick){return}
button.removeAttribute('onclick');const clickHandler=(e)=>{e.preventDefault();this.handleDownload(fileId.trim(),originalOnclick)};button.removeEventListener('click',clickHandler);button.addEventListener('click',clickHandler)})}
async handleDownload(fileId,originalOnclick){const now=Date.now();const timeRemaining=this.downloadCooldown-(now-this.lastDownloadTime);if(timeRemaining>0&&this.lastDownloadTime>0){const seconds=Math.ceil(timeRemaining/1000);this.showMessage(`يرجى الانتظار ${seconds} ثانية قبل تحميل ملف آخر`,'warning');this.startCooldownTimer(timeRemaining);return}
try{this.lastDownloadTime=now;eval(originalOnclick);this.incrementDownloadCountOptimized(fileId).catch(error=>{console.warn('Could not update download count:',error.message)});this.startCooldownTimer(this.downloadCooldown);this.showMessage('تم بدء التحميل بنجاح!','success')}catch(error){console.error('Error handling download:',error);this.showMessage('خطأ في تسجيل التحميل','error')}}
async incrementDownloadCountOptimized(fileId){try{const currentData=this.cache.downloads.get(fileId)||{count:0};const newCount=currentData.count+1;this.cache.downloads.set(fileId,{...currentData,count:newCount});this.updateDownloadDisplay(fileId,newCount);const{data,error}=await this.supabase.from('downloads').upsert({id:fileId,count:newCount,last_download:new Date().toISOString()},{onConflict:'id',ignoreDuplicates:!1}).select();if(error){console.warn('Database update failed, reverting UI update:',error);this.cache.downloads.set(fileId,currentData);this.updateDownloadDisplay(fileId,currentData.count);throw error}}catch(error){console.warn('Could not increment download count for',fileId,':',error.message);throw error}}
startCooldownTimer(duration){this.disableAllDownloadButtons();const startTime=Date.now();const timer=setInterval(()=>{const elapsed=Date.now()-startTime;const remaining=Math.max(0,duration-elapsed);const seconds=Math.ceil(remaining/1000);if(remaining<=0){clearInterval(timer);this.enableAllDownloadButtons();this.updateDownloadButtonsText('تحميل')}else{this.updateDownloadButtonsText(`انتظر ${seconds} ثواني `)}},100)}
disableAllDownloadButtons(){const validFileItems=document.querySelectorAll('.file-item[data-file-id]');validFileItems.forEach(item=>{const fileId=item.dataset.fileId;if(fileId&&fileId.trim()!==''){const button=item.querySelector('.download-btn');if(button){button.disabled=!0;button.classList.add('disabled')}}})}
enableAllDownloadButtons(){const validFileItems=document.querySelectorAll('.file-item[data-file-id]');validFileItems.forEach(item=>{const fileId=item.dataset.fileId;if(fileId&&fileId.trim()!==''){const button=item.querySelector('.download-btn');if(button){button.disabled=!1;button.classList.remove('disabled')}}})}
updateDownloadButtonsText(text){const validFileItems=document.querySelectorAll('.file-item[data-file-id]');validFileItems.forEach(item=>{const fileId=item.dataset.fileId;if(fileId&&fileId.trim()!==''){const button=item.querySelector('.download-btn');if(button){button.textContent=text}}})}
highlightStars(stars,rating){stars.forEach((star,index)=>{star.classList.remove('hover','filled');if(index<rating){star.classList.add('hover')}})}
clearHighlight(stars){stars.forEach(star=>{star.classList.remove('hover')})}
showCurrentRating(stars,fileId){const item=document.querySelector(`[data-file-id="${fileId}"]`);if(!item)return;const scoreElement=item.querySelector('.rating-score');if(!scoreElement)return;const currentRating=parseFloat(scoreElement.textContent)||0;stars.forEach((star,index)=>{star.classList.remove('filled');if(index<Math.round(currentRating)){star.classList.add('filled')}})}
async rateFile(fileId,rating){try{this.showLoadingForFile(fileId);const{data:currentData,error:selectError}=await this.supabase.from('ratings').select('*').eq('id',fileId).single();if(selectError&&selectError.code!=='PGRST116'){throw selectError}
if(currentData){if(currentData.raters&&currentData.raters.includes(this.userFingerprint)){this.showMessage('لقد قمت بتقييم هذا الملف مسبقاً!','warning');this.hideLoadingForFile(fileId);return}
const newTotal=currentData.total+rating;const newCount=currentData.count+1;const newAverage=newTotal/newCount;const newRaters=[...(currentData.raters||[]),this.userFingerprint];const newData={total:newTotal,count:newCount,average:newAverage,raters:newRaters,updated_at:new Date().toISOString()};const{error:updateError}=await this.supabase.from('ratings').update(newData).eq('id',fileId);if(updateError)throw updateError;this.cache.ratings.set(fileId,{id:fileId,...newData});this.updateRatingDisplay(fileId,newData)}else{const newData={id:fileId,total:rating,count:1,average:rating,raters:[this.userFingerprint]};const{error:insertError}=await this.supabase.from('ratings').insert([newData]);if(insertError)throw insertError;this.cache.ratings.set(fileId,newData);this.updateRatingDisplay(fileId,newData)}
this.disableRating(fileId);this.hideLoadingForFile(fileId);this.showMessage('شكراً لك على التقييم!','success')}catch(error){console.error('Error rating file:',error);this.hideLoadingForFile(fileId);this.showMessage('خطأ في حفظ التقييم. حاول مرة أخرى.','error')}}
updateRatingDisplay(fileId,data){const item=document.querySelector(`[data-file-id="${fileId}"]`);if(!item)return;const scoreElement=item.querySelector('.rating-score');const countElement=item.querySelector('.rating-count');const stars=item.querySelectorAll('.star');if(scoreElement){scoreElement.textContent=(data.average||0).toFixed(1)}
if(countElement){countElement.textContent=`(${data.count || 0} تقييم)`}
stars.forEach((star,index)=>{star.classList.remove('filled');if(index<Math.round(data.average||0)){star.classList.add('filled')}})}
updateDownloadDisplay(fileId,count){const item=document.querySelector(`[data-file-id="${fileId}"]`);if(!item)return;let downloadCountElement=item.querySelector('.download-count');if(!downloadCountElement){downloadCountElement=document.createElement('div');downloadCountElement.className='download-count';const downloadBtn=item.querySelector('.download-btn');if(downloadBtn&&downloadBtn.parentNode){downloadBtn.parentNode.insertBefore(downloadCountElement,downloadBtn)}}
downloadCountElement.innerHTML=`تم تحميله ${count} مرة <span style="display:inline-block; width:20px;"></span>`}
disableRating(fileId){const item=document.querySelector(`[data-file-id="${fileId}"]`);if(!item)return;const stars=item.querySelectorAll('.star');stars.forEach(star=>{star.classList.add('disabled')})}
showLoadingForFile(fileId){const item=document.querySelector(`[data-file-id="${fileId}"]`);if(!item)return;const scoreElement=item.querySelector('.rating-score');if(scoreElement){scoreElement.innerHTML='<div class="rating-loading"></div>'}}
hideLoadingForFile(fileId){}
showMessage(text,type='success'){const existingMessage=document.getElementById('ratingMessage');if(existingMessage){existingMessage.remove()}
const messageEl=document.createElement('div');messageEl.id='ratingMessage';messageEl.className=`rating-message ${type}`;messageEl.textContent=text;document.body.appendChild(messageEl);setTimeout(()=>messageEl.classList.add('show'),100);setTimeout(()=>{messageEl.classList.remove('show');setTimeout(()=>{if(messageEl.parentNode){messageEl.remove()}},300)},3000)}
clearCache(){this.cache.ratings.clear();this.cache.downloads.clear();this.cache.lastUpdate=0}
async refreshData(){this.clearCache();const validFileIds=this.getValidFileIds();if(validFileIds.length>0){await this.loadAllDataOptimized(validFileIds)}}
enableRealTimeUpdates(){this.supabase.channel('ratings-changes').on('postgres_changes',{event:'*',schema:'public',table:'ratings'},(payload)=>{console.log('Rating updated:',payload);if(payload.new){this.cache.ratings.set(payload.new.id,payload.new);this.updateRatingDisplay(payload.new.id,payload.new)}}).subscribe();this.supabase.channel('downloads-changes').on('postgres_changes',{event:'*',schema:'public',table:'downloads'},(payload)=>{console.log('Download updated:',payload);if(payload.new){this.cache.downloads.set(payload.new.id,payload.new);this.updateDownloadDisplay(payload.new.id,payload.new.count)}}).subscribe()}}
document.addEventListener('DOMContentLoaded',()=>{window.ratingSystem=new GlobalRatingSystem();setTimeout(()=>{if(window.ratingSystem){window.ratingSystem.enableRealTimeUpdates()}},30000)});window.GlobalRatingSystem=GlobalRatingSystem